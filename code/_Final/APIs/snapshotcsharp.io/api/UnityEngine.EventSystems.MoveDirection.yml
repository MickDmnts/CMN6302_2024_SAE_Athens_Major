### YamlMime:ManagedReference
items:
- uid: UnityEngine.EventSystems.MoveDirection
  commentId: T:UnityEngine.EventSystems.MoveDirection
  id: MoveDirection
  parent: UnityEngine.EventSystems
  children:
  - UnityEngine.EventSystems.MoveDirection.Down
  - UnityEngine.EventSystems.MoveDirection.Left
  - UnityEngine.EventSystems.MoveDirection.None
  - UnityEngine.EventSystems.MoveDirection.Right
  - UnityEngine.EventSystems.MoveDirection.Up
  langs:
  - csharp
  - vb
  name: MoveDirection
  nameWithType: MoveDirection
  fullName: UnityEngine.EventSystems.MoveDirection
  type: Enum
  source:
    remote:
      path: code/unityProject/development/SnapshotDevelopment/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
      branch: mad
      repo: https://github.com/MickDmnts/CMN6302_2024_SAE_Athens_Major.git
    id: MoveDirection
    path: ../Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
    startLine: 131
  assemblies:
  - UnityEngine.UI
  namespace: UnityEngine.EventSystems
  summary: This is an 4 direction movement enum.
  remarks: >-
    MoveDirection provides a way of switching between moving states. You must assign these states to actions, such as moving the GameObject by an up vector when in the Up state.

    Having states like these are easier to identify than always having to include a large amount of vectors and calculations.Instead, you define what you want the state to do in only one part, and switch to the appropriate state when it is needed.
  example:
  - >-
    <pre><code class="lang-csharp">//This is a full example of how a GameObject changes direction using MoveDirection states

    //Assign this script to a visible GameObject (with a Rigidbody attached) to see it in action


    using UnityEngine;

    using UnityEngine.EventSystems;


    public class Example : MonoBehaviour

    {
        Vector3 m_StartPosition, m_StartForce;
        Rigidbody m_Rigidbody;
        //Use Enum for easy switching between direction states
        MoveDirection m_MoveDirection;

        //Use these Vectors for moving Rigidbody components
        Vector3 m_ResetVector;
        Vector3 m_UpVector;
        Vector3 m_RightVector;
        const float speed = 5.0f;

        void Start()
        {
            //You get the Rigidbody component attached to the GameObject
            m_Rigidbody = GetComponent&lt;Rigidbody&gt;();
            //This starts with the Rigidbody not moving in any direction at all
            m_MoveDirection = MoveDirection.None;

            //These are the GameObject’s starting position and Rigidbody position
            m_StartPosition = transform.position;
            m_StartForce = m_Rigidbody.transform.position;

            //This Vector is set to 1 in the y axis (for moving upwards)
            m_UpVector = Vector3.up;
            //This Vector is set to 1 in the x axis (for moving in the right direction)
            m_RightVector = Vector3.right;
            //This Vector is zeroed out for when the Rigidbody should not move
            m_ResetVector = Vector3.zero;
        }

        void Update()
        {
            //This switches the direction depending on button presses
            switch (m_MoveDirection)
            {
                //The starting state which resets the object
                case MoveDirection.None:
                    //Reset to the starting position of the GameObject and Rigidbody
                    transform.position = m_StartPosition;
                    m_Rigidbody.transform.position = m_StartForce;
                    //This resets the velocity of the Rigidbody
                    m_Rigidbody.velocity = m_ResetVector;
                    break;

                //This is for moving in an upwards direction
                case MoveDirection.Up:
                    //Change the velocity so that the Rigidbody travels upwards
                    m_Rigidbody.velocity = m_UpVector * speed;
                    break;

                //This is for moving left
                case MoveDirection.Left:
                    //This moves the Rigidbody to the left (minus right Vector)
                    m_Rigidbody.velocity = -m_RightVector * speed;
                    break;

                //This is for moving right
                case MoveDirection.Right:
                    //This moves the Rigidbody to the right
                    m_Rigidbody.velocity = m_RightVector * speed;
                    break;

                //This is for moving down
                case MoveDirection.Down:
                    //This moves the Rigidbody down
                    m_Rigidbody.velocity = -m_UpVector * speed;
                    break;
            }
        }

        void OnGUI()
        {
            //Press the reset Button to switch to no mode
            if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
            {
                //Switch to start/reset case
                m_MoveDirection = MoveDirection.None;
            }

            //Press the Left button to switch the Rigidbody direction to the left
            if (GUI.Button(new Rect(100, 30, 150, 30), "Move Left"))
            {
                //Switch to the left direction
                m_MoveDirection = MoveDirection.Left;
            }

            //Press the Up button to switch the Rigidbody direction to upwards
            if (GUI.Button(new Rect(100, 60, 150, 30), "Move Up"))
            {
                //Switch to Up Direction
                m_MoveDirection = MoveDirection.Up;
            }

            //Press the Down button to switch the direction to down
            if (GUI.Button(new Rect(100, 90, 150, 30), "Move Down"))
            {
                //Switch to Down Direction
                m_MoveDirection = MoveDirection.Down;
            }

            //Press the right button to switch to the right direction
            if (GUI.Button(new Rect(100, 120, 150, 30), "Move Right"))
            {
                //Switch to Right Direction
                m_MoveDirection = MoveDirection.Right;
            }
        }
    }</code></pre>
  syntax:
    content: public enum MoveDirection
    content.vb: Public Enum MoveDirection
- uid: UnityEngine.EventSystems.MoveDirection.Left
  commentId: F:UnityEngine.EventSystems.MoveDirection.Left
  id: Left
  parent: UnityEngine.EventSystems.MoveDirection
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: MoveDirection.Left
  fullName: UnityEngine.EventSystems.MoveDirection.Left
  type: Field
  source:
    remote:
      path: code/unityProject/development/SnapshotDevelopment/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
      branch: mad
      repo: https://github.com/MickDmnts/CMN6302_2024_SAE_Athens_Major.git
    id: Left
    path: ../Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
    startLine: 218
  assemblies:
  - UnityEngine.UI
  namespace: UnityEngine.EventSystems
  summary: This is the Left state of MoveDirection.  Assign functionality for moving to the left.
  remarks: Use the Left state for an easily identifiable way of moving a GameObject to the left (-1 , 0 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
  example:
  - >-
    <pre><code class="lang-csharp">//Assign this script to a visible GameObject (with a Rigidbody attached) to see this in action


    using UnityEngine;

    using UnityEngine.EventSystems;


    public class Example : MonoBehaviour

    {
        Vector3 m_StartPosition, m_StartForce;
        Rigidbody m_Rigidbody;
        //Use Enum for easy switching between direction states
        MoveDirection m_MoveDirection;

        //Use these Vectors for moving Rigidbody components
        Vector3 m_ResetVector;
        Vector3 m_RightVector;
        const float speed = 5.0f;

        void Start()
        {
            //You get the Rigidbody component attached to the GameObject
            m_Rigidbody = GetComponent&lt;Rigidbody&gt;();
            //This starts with the Rigidbody not moving in any direction at all
            m_MoveDirection = MoveDirection.None;

            //These are the GameObject’s starting position and Rigidbody position
            m_StartPosition = transform.position;
            m_StartForce = m_Rigidbody.transform.position;

            //This Vector is set to 1 in the x axis (for moving in the right direction)
            m_RightVector = Vector3.right;
            //This Vector is zeroed out for when the Rigidbody should not move
            m_ResetVector = Vector3.zero;
        }

        void Update()
        {
            //This switches the direction depending on button presses
            switch (m_MoveDirection)
            {
                //The starting state which resets the object
                case MoveDirection.None:
                    //Reset to the starting position of the GameObject and Rigidbody
                    transform.position = m_StartPosition;
                    m_Rigidbody.transform.position = m_StartForce;
                    //This resets the velocity of the Rigidbody
                    m_Rigidbody.velocity = m_ResetVector;
                    break;

                //This is for moving left
                case MoveDirection.Left:
                    //This moves the Rigidbody to the left (minus right Vector)
                    m_Rigidbody.velocity = -m_RightVector * speed;
                    break;
            }
        }

        void OnGUI()
        {
            //Press the reset Button to switch to no mode
            if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
            {
                //Switch to start/reset case
                m_MoveDirection = MoveDirection.None;
            }

            //Press the Left button to switch the Rigidbody direction to the left
            if (GUI.Button(new Rect(100, 30, 150, 30), "Move Left"))
            {
                //Switch to the left direction
                m_MoveDirection = MoveDirection.Left;
            }
        }
    }</code></pre>
  syntax:
    content: Left = 0
    return:
      type: UnityEngine.EventSystems.MoveDirection
- uid: UnityEngine.EventSystems.MoveDirection.Up
  commentId: F:UnityEngine.EventSystems.MoveDirection.Up
  id: Up
  parent: UnityEngine.EventSystems.MoveDirection
  langs:
  - csharp
  - vb
  name: Up
  nameWithType: MoveDirection.Up
  fullName: UnityEngine.EventSystems.MoveDirection.Up
  type: Field
  source:
    remote:
      path: code/unityProject/development/SnapshotDevelopment/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
      branch: mad
      repo: https://github.com/MickDmnts/CMN6302_2024_SAE_Athens_Major.git
    id: Up
    path: ../Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
    startLine: 305
  assemblies:
  - UnityEngine.UI
  namespace: UnityEngine.EventSystems
  summary: This is the Up state of MoveDirection.  Assign functionality for moving in an upward direction.
  remarks: Use the Up state for an easily identifiable way of moving a GameObject upwards (0 , 1 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
  example:
  - >-
    <pre><code class="lang-csharp">//Attach this script to a GameObject with a Rigidbody component. Press the "Move Up" button in Game view to see it in action.


    using UnityEngine;

    using UnityEngine.EventSystems;


    public class Example : MonoBehaviour

    {
        Vector3 m_StartPosition, m_StartForce;
        Rigidbody m_Rigidbody;
        //Use Enum for easy switching between direction states
        MoveDirection m_MoveDirection;

        //Use these Vectors for moving Rigidbody components
        Vector3 m_ResetVector;
        Vector3 m_UpVector;
        const float speed = 10.0f;

        void Start()
        {
            //You get the Rigidbody component attached to the GameObject
            m_Rigidbody = GetComponent&lt;Rigidbody&gt;();
            //This starts with the Rigidbody not moving in any direction at all
            m_MoveDirection = MoveDirection.None;

            //These are the GameObject’s starting position and Rigidbody position
            m_StartPosition = transform.position;
            m_StartForce = m_Rigidbody.transform.position;

            //This Vector is set to 1 in the y axis (for moving upwards)
            m_UpVector = Vector3.up;
            //This Vector is zeroed out for when the Rigidbody should not move
            m_ResetVector = Vector3.zero;
        }

        void Update()
        {
            //This switches the direction depending on button presses
            switch (m_MoveDirection)
            {
                //The starting state which resets the object
                case MoveDirection.None:
                    //Reset to the starting position of the GameObject and Rigidbody
                    transform.position = m_StartPosition;
                    m_Rigidbody.transform.position = m_StartForce;
                    //This resets the velocity of the Rigidbody
                    m_Rigidbody.velocity = m_ResetVector;
                    break;

                //This is for moving in an upwards direction
                case MoveDirection.Up:
                    //Change the velocity so that the Rigidbody travels upwards
                    m_Rigidbody.velocity = m_UpVector * speed;
                    break;
            }
        }

        void OnGUI()
        {
            //Press the reset Button to switch to no mode
            if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
            {
                //Switch to start/reset case
                m_MoveDirection = MoveDirection.None;
            }

            //Press the Up button to switch the Rigidbody direction to upwards
            if (GUI.Button(new Rect(100, 60, 150, 30), "Move Up"))
            {
                //Switch to Up Direction
                m_MoveDirection = MoveDirection.Up;
            }
        }
    }</code></pre>
  syntax:
    content: Up = 1
    return:
      type: UnityEngine.EventSystems.MoveDirection
- uid: UnityEngine.EventSystems.MoveDirection.Right
  commentId: F:UnityEngine.EventSystems.MoveDirection.Right
  id: Right
  parent: UnityEngine.EventSystems.MoveDirection
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: MoveDirection.Right
  fullName: UnityEngine.EventSystems.MoveDirection.Right
  type: Field
  source:
    remote:
      path: code/unityProject/development/SnapshotDevelopment/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
      branch: mad
      repo: https://github.com/MickDmnts/CMN6302_2024_SAE_Athens_Major.git
    id: Right
    path: ../Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
    startLine: 392
  assemblies:
  - UnityEngine.UI
  namespace: UnityEngine.EventSystems
  summary: This is the Right state of MoveDirection. Assign functionality for moving to the right.
  remarks: Use the Right state for an easily identifiable way of moving a GameObject to the right (1 , 0 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
  example:
  - >-
    <pre><code class="lang-csharp">//Attach this script to a GameObject with a Rigidbody component. Press the "Move Right" button in Game view to see it in action.


    using UnityEngine;

    using UnityEngine.EventSystems;


    public class MoveDirectionExample : MonoBehaviour

    {
        Vector3 m_StartPosition, m_StartForce;
        Rigidbody m_Rigidbody;
        //Use Enum for easy switching between direction states
        MoveDirection m_MoveDirection;

        //Use these Vectors for moving Rigidbody components
        Vector3 m_ResetVector;
        Vector3 m_RightVector;
        const float speed = 5.0f;

        void Start()
        {
            //You get the Rigidbody component attached to the GameObject
            m_Rigidbody = GetComponent&lt;Rigidbody&gt;();
            //This starts with the Rigidbody not moving in any direction at all
            m_MoveDirection = MoveDirection.None;

            //These are the GameObject’s starting position and Rigidbody position
            m_StartPosition = transform.position;
            m_StartForce = m_Rigidbody.transform.position;

            //This Vector is set to 1 in the x axis (for moving in the right direction)
            m_RightVector = Vector3.right;
            //This Vector is zeroed out for when the Rigidbody should not move
            m_ResetVector = Vector3.zero;
        }

        void Update()
        {
            //This switches the direction depending on button presses
            switch (m_MoveDirection)
            {
                //The starting state which resets the object
                case MoveDirection.None:
                    //Reset to the starting position of the GameObject and Rigidbody
                    transform.position = m_StartPosition;
                    m_Rigidbody.transform.position = m_StartForce;
                    //This resets the velocity of the Rigidbody
                    m_Rigidbody.velocity = m_ResetVector;
                    break;

                //This is for moving right
                case MoveDirection.Right:
                    //This moves the Rigidbody to the right
                    m_Rigidbody.velocity = m_RightVector * speed;
                    break;
            }
        }

        void OnGUI()
        {
            //Press the reset Button to switch to no mode
            if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
            {
                //Switch to start/reset case
                m_MoveDirection = MoveDirection.None;
            }

            //Press the Left button to switch the Rigidbody direction to the right
            if (GUI.Button(new Rect(100, 30, 150, 30), "Move Right"))
            {
                //Switch to the left direction
                m_MoveDirection = MoveDirection.Right;
            }
        }
    }</code></pre>
  syntax:
    content: Right = 2
    return:
      type: UnityEngine.EventSystems.MoveDirection
- uid: UnityEngine.EventSystems.MoveDirection.Down
  commentId: F:UnityEngine.EventSystems.MoveDirection.Down
  id: Down
  parent: UnityEngine.EventSystems.MoveDirection
  langs:
  - csharp
  - vb
  name: Down
  nameWithType: MoveDirection.Down
  fullName: UnityEngine.EventSystems.MoveDirection.Down
  type: Field
  source:
    remote:
      path: code/unityProject/development/SnapshotDevelopment/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
      branch: mad
      repo: https://github.com/MickDmnts/CMN6302_2024_SAE_Athens_Major.git
    id: Down
    path: ../Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
    startLine: 479
  assemblies:
  - UnityEngine.UI
  namespace: UnityEngine.EventSystems
  summary: The Down State of MoveDirection. Assign functionality for moving in a downward direction.
  remarks: Use the Down state for an easily identifiable way of moving a GameObject downwards (0 , -1 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
  example:
  - >-
    <pre><code class="lang-csharp">//Attach this script to a GameObject with a Rigidbody component. Press the "Move Down" button in Game view to see it in action.


    using UnityEngine;

    using UnityEngine.EventSystems;


    public class Example : MonoBehaviour

    {
        Vector3 m_StartPosition, m_StartForce;
        Rigidbody m_Rigidbody;
        //Use Enum for easy switching between direction states
        MoveDirection m_MoveDirection;

        //Use these Vectors for moving Rigidbody components
        Vector3 m_ResetVector;
        Vector3 m_UpVector;
        const float speed = 10.0f;

        void Start()
        {
            //You get the Rigidbody component attached to the GameObject
            m_Rigidbody = GetComponent&lt;Rigidbody&gt;();
            //This starts with the Rigidbody not moving in any direction at all
            m_MoveDirection = MoveDirection.None;

            //These are the GameObject’s starting position and Rigidbody position
            m_StartPosition = transform.position;
            m_StartForce = m_Rigidbody.transform.position;

            //This Vector is set to 1 in the y axis (for moving upwards)
            m_UpVector = Vector3.up;
            //This Vector is zeroed out for when the Rigidbody should not move
            m_ResetVector = Vector3.zero;
        }

        void Update()
        {
            //This switches the direction depending on button presses
            switch (m_MoveDirection)
            {
                //The starting state which resets the object
                case MoveDirection.None:
                    //Reset to the starting position of the GameObject and Rigidbody
                    transform.position = m_StartPosition;
                    m_Rigidbody.transform.position = m_StartForce;
                    //This resets the velocity of the Rigidbody
                    m_Rigidbody.velocity = m_ResetVector;
                    break;

                //This is for moving down
                case MoveDirection.Down:
                    //This moves the Rigidbody down
                    m_Rigidbody.velocity = -m_UpVector * speed;
                    break;
            }
        }

        void OnGUI()
        {
            //Press the reset Button to switch to no mode
            if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
            {
                //Switch to start/reset case
                m_MoveDirection = MoveDirection.None;
            }

            //Press the Down button to switch the direction to down
            if (GUI.Button(new Rect(100, 90, 150, 30), "Move Down"))
            {
                //Switch to Down Direction
                m_MoveDirection = MoveDirection.Down;
            }
        }
    }</code></pre>
  syntax:
    content: Down = 3
    return:
      type: UnityEngine.EventSystems.MoveDirection
- uid: UnityEngine.EventSystems.MoveDirection.None
  commentId: F:UnityEngine.EventSystems.MoveDirection.None
  id: None
  parent: UnityEngine.EventSystems.MoveDirection
  langs:
  - csharp
  - vb
  name: None
  nameWithType: MoveDirection.None
  fullName: UnityEngine.EventSystems.MoveDirection.None
  type: Field
  source:
    remote:
      path: code/unityProject/development/SnapshotDevelopment/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
      branch: mad
      repo: https://github.com/MickDmnts/CMN6302_2024_SAE_Athens_Major.git
    id: None
    path: ../Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/MoveDirection.cs
    startLine: 566
  assemblies:
  - UnityEngine.UI
  namespace: UnityEngine.EventSystems
  summary: This is the None state. Assign functionality that stops movement.
  remarks: Use the None state for an easily identifiable way of stopping, resetting or initialising a GameObject's movement. This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
  example:
  - >-
    <pre><code class="lang-csharp">//Attach this script to a GameObject with a Rigidbody attached. This script starts off on the ModeDirection.None state but changes depending on buttons you press.


    using UnityEngine;

    using UnityEngine.EventSystems;


    public class Example : MonoBehaviour

    {
        Vector3 m_StartPosition, m_StartForce;
        Rigidbody m_Rigidbody;
        //Use Enum for easy switching between direction states
        MoveDirection m_MoveDirection;

        //Use these Vectors for moving Rigidbody components
        Vector3 m_ResetVector;
        Vector3 m_UpVector;
        const float speed = 10.0f;

        void Start()
        {
            //You get the Rigidbody component attached to the GameObject
            m_Rigidbody = GetComponent&lt;Rigidbody&gt;();
            //This starts with the Rigidbody not moving in any direction at all
            m_MoveDirection = MoveDirection.None;

            //These are the GameObject’s starting position and Rigidbody position
            m_StartPosition = transform.position;
            m_StartForce = m_Rigidbody.transform.position;

            //This Vector is set to 1 in the y axis (for moving upwards)
            m_UpVector = Vector3.up;
            //This Vector is zeroed out for when the Rigidbody should not move
            m_ResetVector = Vector3.zero;
        }

        void Update()
        {
            //This switches the direction depending on button presses
            switch (m_MoveDirection)
            {
                //The starting state which resets the object
                case MoveDirection.None:
                    //Reset to the starting position of the GameObject and Rigidbody
                    transform.position = m_StartPosition;
                    m_Rigidbody.transform.position = m_StartForce;
                    //This resets the velocity of the Rigidbody
                    m_Rigidbody.velocity = m_ResetVector;
                    break;

                //This is for moving down
                case MoveDirection.Down:
                    //This moves the Rigidbody down
                    m_Rigidbody.velocity = -m_UpVector * speed;
                    break;
            }
        }

        void OnGUI()
        {
            //Press the reset Button to switch to no mode
            if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
            {
                //Switch to start/reset case
                m_MoveDirection = MoveDirection.None;
            }

            //Press the Down button to switch the direction to down
            if (GUI.Button(new Rect(100, 90, 150, 30), "Move Down"))
            {
                //Switch to Down Direction
                m_MoveDirection = MoveDirection.Down;
            }
        }
    }</code></pre>
  syntax:
    content: None = 4
    return:
      type: UnityEngine.EventSystems.MoveDirection
references:
- uid: UnityEngine.EventSystems
  commentId: N:UnityEngine.EventSystems
  href: UnityEngine.html
  name: UnityEngine.EventSystems
  nameWithType: UnityEngine.EventSystems
  fullName: UnityEngine.EventSystems
  spec.csharp:
  - uid: UnityEngine
    name: UnityEngine
    href: UnityEngine.html
  - name: .
  - uid: UnityEngine.EventSystems
    name: EventSystems
    href: UnityEngine.EventSystems.html
  spec.vb:
  - uid: UnityEngine
    name: UnityEngine
    href: UnityEngine.html
  - name: .
  - uid: UnityEngine.EventSystems
    name: EventSystems
    href: UnityEngine.EventSystems.html
- uid: UnityEngine.EventSystems.MoveDirection
  commentId: T:UnityEngine.EventSystems.MoveDirection
  parent: UnityEngine.EventSystems
  href: UnityEngine.EventSystems.MoveDirection.html
  name: MoveDirection
  nameWithType: MoveDirection
  fullName: UnityEngine.EventSystems.MoveDirection
